services:
  app:
    restart: always
    container_name: go-server
    tty: true
    build: .
    volumes:
      - .:/app
    depends_on:
      postgresdb:
        condition: service_healthy
    ports:
      - "${SERVER_PORT}:8080"
    networks:
      - server-database

  postgresdb:
    restart: always
    image: postgres:latest
    container_name: postgres-db
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_DB=${POSTGRES_DBNAME}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_INSIDE_PORT}"
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DBNAME}"
        ]
      interval: 5s
      timeout: 5s
      retries: 15
    networks:
      - server-database
      - database

  migrate:
    image: migrate/migrate
    depends_on:
      postgresdb:
        condition: service_healthy
    command: "-path /migrations/migrations -database=postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_INSIDE_PORT}/${POSTGRES_DBNAME}?sslmode=${POSTGRES_SSLMODE} up"
    volumes:
      - ./migrations:/migrations
    links:
      - postgresdb
    networks:
      - database

networks:
  server-database:
    driver: bridge
  database:
    driver: bridge
