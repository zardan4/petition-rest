// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	petitions "github.com/zardan4/petition-rest"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user petitions.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(name, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", name, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), name, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockPetition is a mock of Petition interface.
type MockPetition struct {
	ctrl     *gomock.Controller
	recorder *MockPetitionMockRecorder
}

// MockPetitionMockRecorder is the mock recorder for MockPetition.
type MockPetitionMockRecorder struct {
	mock *MockPetition
}

// NewMockPetition creates a new mock instance.
func NewMockPetition(ctrl *gomock.Controller) *MockPetition {
	mock := &MockPetition{ctrl: ctrl}
	mock.recorder = &MockPetitionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetition) EXPECT() *MockPetitionMockRecorder {
	return m.recorder
}

// CreatePetition mocks base method.
func (m *MockPetition) CreatePetition(title, text string, authorId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePetition", title, text, authorId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePetition indicates an expected call of CreatePetition.
func (mr *MockPetitionMockRecorder) CreatePetition(title, text, authorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePetition", reflect.TypeOf((*MockPetition)(nil).CreatePetition), title, text, authorId)
}

// DeletePetition mocks base method.
func (m *MockPetition) DeletePetition(petitionId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePetition", petitionId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePetition indicates an expected call of DeletePetition.
func (mr *MockPetitionMockRecorder) DeletePetition(petitionId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePetition", reflect.TypeOf((*MockPetition)(nil).DeletePetition), petitionId, userId)
}

// GetAllPetitions mocks base method.
func (m *MockPetition) GetAllPetitions() ([]petitions.Petition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPetitions")
	ret0, _ := ret[0].([]petitions.Petition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPetitions indicates an expected call of GetAllPetitions.
func (mr *MockPetitionMockRecorder) GetAllPetitions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPetitions", reflect.TypeOf((*MockPetition)(nil).GetAllPetitions))
}

// GetPetition mocks base method.
func (m *MockPetition) GetPetition(petitionId int) (petitions.Petition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetition", petitionId)
	ret0, _ := ret[0].(petitions.Petition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetition indicates an expected call of GetPetition.
func (mr *MockPetitionMockRecorder) GetPetition(petitionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetition", reflect.TypeOf((*MockPetition)(nil).GetPetition), petitionId)
}

// UpdatePetition mocks base method.
func (m *MockPetition) UpdatePetition(updatedPetition petitions.UpdatePetitionInput, petitionId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePetition", updatedPetition, petitionId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePetition indicates an expected call of UpdatePetition.
func (mr *MockPetitionMockRecorder) UpdatePetition(updatedPetition, petitionId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePetition", reflect.TypeOf((*MockPetition)(nil).UpdatePetition), updatedPetition, petitionId, userId)
}

// MockSubs is a mock of Subs interface.
type MockSubs struct {
	ctrl     *gomock.Controller
	recorder *MockSubsMockRecorder
}

// MockSubsMockRecorder is the mock recorder for MockSubs.
type MockSubsMockRecorder struct {
	mock *MockSubs
}

// NewMockSubs creates a new mock instance.
func NewMockSubs(ctrl *gomock.Controller) *MockSubs {
	mock := &MockSubs{ctrl: ctrl}
	mock.recorder = &MockSubsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubs) EXPECT() *MockSubsMockRecorder {
	return m.recorder
}

// CheckSignature mocks base method.
func (m *MockSubs) CheckSignature(petitionId, userId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSignature", petitionId, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSignature indicates an expected call of CheckSignature.
func (mr *MockSubsMockRecorder) CheckSignature(petitionId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSignature", reflect.TypeOf((*MockSubs)(nil).CheckSignature), petitionId, userId)
}

// CreateSub mocks base method.
func (m *MockSubs) CreateSub(petitionId, userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSub", petitionId, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSub indicates an expected call of CreateSub.
func (mr *MockSubsMockRecorder) CreateSub(petitionId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSub", reflect.TypeOf((*MockSubs)(nil).CreateSub), petitionId, userId)
}

// DeleteSub mocks base method.
func (m *MockSubs) DeleteSub(subId, petitionId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSub", subId, petitionId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSub indicates an expected call of DeleteSub.
func (mr *MockSubsMockRecorder) DeleteSub(subId, petitionId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSub", reflect.TypeOf((*MockSubs)(nil).DeleteSub), subId, petitionId, userId)
}

// GetAllSubs mocks base method.
func (m *MockSubs) GetAllSubs(petitionId int) ([]petitions.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubs", petitionId)
	ret0, _ := ret[0].([]petitions.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubs indicates an expected call of GetAllSubs.
func (mr *MockSubsMockRecorder) GetAllSubs(petitionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubs", reflect.TypeOf((*MockSubs)(nil).GetAllSubs), petitionId)
}
